SET LINESIZE 230;
SET PAGESIZE 200;

--Q1-- OK
SELECT ITEM_ID,COUNT(DISTINCT COMP_ID) NUM_OF_COMPUTER,COUNT(DISTINCT ST_ID) NUM_OF_USERS,COUNT(DISTINCT LOAN_ID) NUM_OF_LOANS
FROM ITEM LEFT OUTER JOIN COMPUTER USING (ITEM_ID)
	      LEFT OUTER JOIN LOAN USING (COMP_ID)    
		  LEFT OUTER JOIN STUDENT USING (ST_ID)	
GROUP BY ITEM_ID
UNION ALL
SELECT 'GRAND TOTAL',COUNT(DISTINCT COMP_ID),COUNT(DISTINCT ST_ID),COUNT(DISTINCT LOAN_ID)
FROM ITEM LEFT OUTER JOIN COMPUTER USING (ITEM_ID)
	      LEFT OUTER JOIN LOAN USING (COMP_ID)    
		  LEFT OUTER JOIN STUDENT USING (ST_ID);
			 
--Q2-- OK

--TIME ERROR, IT SHOULD BE 12--
COLUMN COMP_NAME FORMAT A30;
COLUMN PERCENT_USED FORMAT A10;
SELECT COMP_ID,COMP_NAME,YEAR,NVL(INDICATOR,'AVALIABLE'),
COUNT(DISTINCT LOAN_ID) AS "NUMBER OF RENTALS",
NVL(SUM(DISTINCT RENT_DAYS),0) AS "DAYS ON LOAN",
ROUND(NVL(SUM(DISTINCT PERCENT_USED),0),4)*100||'%' AS "PERCENT_USED"
FROM COMPUTER LEFT OUTER JOIN LOAN USING (COMP_ID)
			  LEFT OUTER JOIN (SELECT COMP_ID,RENT_DAYS,RENT_DAYS/TIME AS PERCENT_USED,INDICATOR
							   FROM (SELECT COMP_ID,
									  (CASE WHEN DATE_RETURNED IS NULL AND START_DATE IS NOT NULL THEN ROUND(SYSDATE-START_DATE,0)
									   WHEN DATE_RETURNED IS NOT NULL AND START_DATE IS NOT NULL THEN DATE_RETURNED-START_DATE
									   END) AS RENT_DAYS,
									   ROUND(SYSDATE-START_DATE,0) AS "TIMESTAMP",
									  (CASE WHEN START_DATE IS NOT NULL AND DATE_RETURNED IS NULL THEN 'ON LOAN'
											ELSE 'AVAILABLE' END) AS INDICATOR,
									  ROUND(SYSDATE-YEAR,0) AS TIME
									  FROM COMPUTER LEFT OUTER JOIN LOAN USING(COMP_ID) ) 
									  WHERE TIMESTAMP IN ( SELECT TIME 
														  FROM (
																  SELECT COMP_ID,MIN( NVL(ROUND(SYSDATE-START_DATE,0),0) ) AS "TIME"
																  FROM COMPUTER LEFT OUTER JOIN LOAN USING(COMP_ID)
																  GROUP BY COMP_ID )													  
														  ) )USING (COMP_ID)
GROUP BY COMP_ID,COMP_NAME,YEAR,INDICATOR;


--Q3-- OK
SELECT COMP_ID,STU,RENTED_DAYS,
COUNT(DISTINCT LOAN_ID) AS "NUMBER OF RENTALS"
FROM  STUDENT RIGHT OUTER JOIN LOAN USING (ST_ID)
			  RIGHT OUTER JOIN (SELECT COMP_ID,START_DATE AS "LAST_RENT_DATE",
					ST_ID||' '||ST_FNAME||' '||ST_LNAME AS "STU",
					ROUND(SYSDATE-START_DATE,0) AS "RENTED_DAYS"
					FROM STUDENT JOIN LOAN USING (ST_ID)
					WHERE START_DATE IS NOT NULL AND DATE_RETURNED IS NULL) USING (COMP_ID)
GROUP BY COMP_ID,STU,RENTED_DAYS;

--Q4--OK
COLUMN "VENDOR_INFO" FORMAT A25;
COLUMN "LIST OF COMPUTER" FORMAT A70;
COLUMN "NUM_COMPUTER" FORMAT 99999999999;

SELECT VENDOR_ID||' '||NAME AS "VENDOR_INFO",
LISTAGG(COMP_NAME,',') WITHIN GROUP
		(ORDER BY COMP_NAME) AS "LIST OF COMPUTER",
COUNT(COMP_ID) AS "NUM_COMPUTER"
FROM ITEM LEFT OUTER JOIN COMPUTER USING (ITEM_ID)
		  LEFT OUTER JOIN VENDOR USING (VENDOR_ID)
WHERE ITEM_MANUF <> NAME
GROUP BY VENDOR_ID,NAME;

--Q5--
--TOTAL RENTAL TIMES IS A LITTLE BIT TRIKY--
SELECT COMP_ID,
(CASE WHEN RENT_TIMES = 0 THEN 0
      ELSE ROUND(TOTAL_DOWNTIME/RENT_TIMES,0) END) AS DOWNTIME
FROM 
(SELECT COMP_ID,
COUNT(START_DATE) AS "RENT_TIMES"
FROM COMPUTER LEFT OUTER JOIN LOAN USING(COMP_ID)
GROUP BY COMP_ID) JOIN
(
SELECT COMP_ID,LAST+RENT AS "TOTAL_DOWNTIME"
FROM(SELECT COMP_ID, MIN(RENT_DAYS) AS "LAST",SUM(NVL(GAP,0)) AS "RENT"
	 FROM (SELECT COMP_ID,START_DATE,DATE_RETURNED,RENT_DAYS,
		  (START_DATE-LAG(DATE_RETURNED,1) OVER (PARTITION BY COMP_ID ORDER BY START_DATE) ) AS "GAP"			   
		   FROM(SELECT COMP_ID,START_DATE,DATE_RETURNED,
				(CASE WHEN DATE_RETURNED IS NULL AND START_DATE IS NOT NULL THEN 0
					  WHEN DATE_RETURNED IS NOT NULL AND START_DATE IS NOT NULL THEN ROUND(SYSDATE-DATE_RETURNED,0)
					  ELSE 0 END) AS RENT_DAYS
				FROM COMPUTER LEFT OUTER JOIN LOAN USING(COMP_ID) ) )
	 GROUP BY COMP_ID) ) USING (COMP_ID)
ORDER BY COMP_ID;

--Q6-- OK
COLUMN STU FORMAT A25;
SELECT ST_ID||' '||ST_FNAME||' '||ST_LNAME AS "STU",EMAIL,NAME AS PROGRAM_NAME
FROM PROGRAM LEFT OUTER JOIN STUDENT USING (PROG_ID)
			 LEFT OUTER JOIN LOAN USING (ST_ID)
WHERE UPPER(NAME) LIKE '%PH.D%'
HAVING COUNT(LOAN_ID) = 0
GROUP BY ST_ID,ST_FNAME,ST_LNAME,EMAIL,NAME; 

--Q7--

COLUMN STU FORMAT A20;
COLUMN LIST_OF_RENT FORMAT A20;

SELECT STU,
LISTAGG(RENT_DAYS,',') WITHIN GROUP
		(ORDER BY RENT_DAYS) AS "LIST_OF_RENT" 
FROM(SELECT STU,COMP_ID,START_DATE,DATE_RETURNED,
	DATE_RETURNED-LAG(DATE_RETURNED,1) OVER (PARTITION BY STU ORDER BY START_DATE) AS "INDICATOR",
	DATE_RETURNED-LEAD(START_DATE,1) OVER (PARTITION BY STU ORDER BY START_DATE) AS "OVERLAP1",
	LAG(DATE_RETURNED,1) OVER (PARTITION BY STU ORDER BY START_DATE)-START_DATE AS "OVERLAP2",
	DATE_RETURNED-START_DATE AS "OVERLAP3",
	RENT_DAYS
	FROM( SELECT COMP_ID,START_DATE,DATE_RETURNED,
		  ST_ID||' '||ST_FNAME||' '||ST_LNAME AS "STU",
		 (CASE WHEN DATE_RETURNED IS NULL AND START_DATE IS NOT NULL THEN ROUND(SYSDATE-START_DATE,0)
			   WHEN DATE_RETURNED IS NOT NULL AND START_DATE IS NOT NULL THEN DATE_RETURNED-START_DATE
			   ELSE 0 END) AS RENT_DAYS
		  FROM COMPUTER LEFT OUTER JOIN LOAN USING (COMP_ID)
						LEFT OUTER JOIN STUDENT USING (ST_ID)
		  WHERE START_DATE IS NOT NULL) )
WHERE ( (OVERLAP1>30 OR OVERLAP2>30) AND RENT_DAYS>30 AND INDICATOR >=0) OR (RENT_DAYS>30 AND INDICATOR <0 AND OVERLAP3>30)
GROUP BY STU;

--Q8-- OK
SELECT DECODE(SEMESTER, NULL , 'PROGRAM_TOTAL',
			  SEMESTER) "SEMESTER",
	   SUM(DECODE(PROG_ID,'p001',1,0) ) AS "Information Technology",
	   SUM(DECODE(PROG_ID,'p002',1,0) )AS "Computer Science",
	   SUM(DECODE(PROG_ID,'p003',1,0) )AS "Robotics",
	   SUM(DECODE(PROG_ID,'p004',1,0) )AS "Machine Learning",
	   SUM(DECODE(PROG_ID,'p005',1,0) )AS "Data Science",
	   COUNT(PROG_ID) AS "SEMESTER_TOTAL"
FROM(SELECT (CASE WHEN EXTRACT(DAY FROM START_DATE)>=1 AND
				  EXTRACT(MONTH FROM START_DATE)>=1 AND EXTRACT(MONTH FROM START_DATE)<7 AND
				  EXTRACT(YEAR FROM START_DATE)=EXTRACT(YEAR FROM SYSDATE)-1 THEN 'SEMESTER 1'
			 WHEN EXTRACT(DAY FROM START_DATE)>=1 AND
				  EXTRACT(MONTH FROM START_DATE)>=7 AND EXTRACT(MONTH FROM START_DATE)<=12 AND
				  EXTRACT(YEAR FROM START_DATE)=EXTRACT(YEAR FROM SYSDATE)-1 THEN 'SEMESTER 2'
			END)
			AS "SEMESTER",
		LOAN_ID,PROG_ID
	 FROM PROGRAM LEFT OUTER JOIN STUDENT USING (PROG_ID)
				  LEFT OUTER JOIN LOAN USING (ST_ID) )
WHERE SEMESTER IS NOT NULL
GROUP BY GROUPING SETS (SEMESTER,() );

--9-- OK
COLUMN RENT_LOCATION FORMAT A20;
COLUMN STU FORMAT A30;
BREAK ON PROG_ID
SELECT (CASE WHEN PROG_ID IS NULL THEN 'GRAND TOTAL'
			 WHEN PROG_ID IS NOT NULL AND STU IS NULL THEN 'SUBTOTAL'
			 ELSE PROG_ID END) "PROG_ID",
STU,RENT_LOCATION,
COUNT(LOAN_ID) AS "RENT_TIMES",
SUM(RENT_WEEKS) AS "TOTAL_RENT_WEEK"
FROM(SELECT PROG_ID,ST_ID||' '||ST_FNAME||' '||ST_LNAME AS "STU",
			LOC_BLDG||' '||LOC_ROOM AS "RENT_LOCATION",LOAN_ID,
			(CASE WHEN DATE_RETURNED IS NULL AND START_DATE IS NOT NULL THEN ROUND( (SYSDATE-START_DATE)/7,0)
						   WHEN DATE_RETURNED IS NOT NULL AND START_DATE IS NOT NULL THEN ROUND( (DATE_RETURNED-START_DATE)/7,0)
						   ELSE 0 END) AS RENT_WEEKS
			FROM PROGRAM LEFT OUTER JOIN STUDENT USING (PROG_ID)
						 LEFT OUTER JOIN LOAN USING (ST_ID)
						 LEFT OUTER JOIN COMPUTER USING (COMP_ID)
						 LEFT OUTER JOIN LOCATION USING (LOCATION_ID) )
GROUP BY ROLLUP(PROG_ID,(STU,RENT_LOCATION) );

						 
--10-- OK
BREAK ON VENDOR_INFO
SELECT (CASE WHEN VENDOR_INFO IS NULL THEN 'GRAND TOTAL'
	  WHEN VENDOR_INFO IS NOT NULL AND ITEM_INFO IS NULL THEN 'SUBTOTAL'
	  ELSE VENDOR_INFO END) "VENDOR_INFO",
ITEM_INFO,SUM(QUANTITY) AS "QUANTITY",TO_CHAR(SUM(RESALE_REVENUE),'$99990') AS "RESALE_REVENUE"
FROM (
		SELECT VENDOR_INFO,ITEM_INFO,UNITPRICE,
		COUNT(COMP_ID) AS "QUANTITY",
		COUNT(COMP_ID)*UNITPRICE AS "RESALE_REVENUE"
		FROM
				(SELECT VENDOR_ID||' '||NAME AS "VENDOR_INFO",
				ITEM_MANUF||' '||ITEM_MODEL AS "ÏTEM_INFO",
				COMP_ID,
				(CASE WHEN UPPER(COMP_NAME) LIKE '%DELL%' THEN 500
					  WHEN UPPER(COMP_NAME) LIKE '%HP%' THEN 300
					  ELSE 150 END) AS "UNITPRICE"
				FROM ITEM LEFT OUTER JOIN COMPUTER USING (ITEM_ID)
						  LEFT OUTER JOIN VENDOR USING (VENDOR_ID) )
		GROUP BY VENDOR_INFO,ITEM_INFO,UNITPRICE)
GROUP BY ROLLUP(VENDOR_INFO,ITEM_INFO);	  

--DESIGN--
--The IS Department is considering purchasing a bunch of new computers.--
--They want to determine the configuration of the computer for next orders--
--based on the needs of the students during the last year.--
--To assist this, determinate the top ONE computers with the highest rental times.--
--List the specific configuration of THIS computers.--







