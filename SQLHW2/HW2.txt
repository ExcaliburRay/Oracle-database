SET LINESIZE 230;
SET PAGESIZE 200;

COLUMN CATALOG_NUM FORMAT A10;
COLUMN TITLE FORMAT A50;

--Part I--
--Q1:--
UPDATE INVENTORY 
SET NEW = 'N'
WHERE CATALOG_NUM IN 
(SELECT CATALOG_NUM 
FROM FILM JOIN INVENTORY USING(CATALOG_NUM)
WHERE YEAR<2015 AND NEW = 'Y');

--Q2:-- 
ALTER TABLE INVENTORY 
DROP CONSTRAINT INVENTORY_CATALOG_FK;

ALTER TABLE FILM
DROP CONSTRAINT FILM_PK;

UPDATE INVENTORY
SET CATALOG_NUM = (
SELECT SUBSTR(Catalog_Num,1,LENGTH(CATALOG_NUM)-1)||SUBSTR(FORMAT,1,1)
FROM FILM 
WHERE FILM.CATALOG_NUM=INVENTORY.CATALOG_NUM);

UPDATE FILM
SET Catalog_Num = CONCAT(SUBSTR(Catalog_Num,1,LENGTH(CATALOG_NUM)-1),SUBSTR(FORMAT,1,1));

ALTER TABLE FILM
ADD CONSTRAINT FILM_PK 
PRIMARY KEY(CATALOG_NUM);

ALTER TABLE INVENTORY 
ADD CONSTRAINT INVENTORY_CATALOG_FK
FOREIGN KEY (CATALOG_NUM)
REFERENCES FILM (CATALOG_NUM);

--Q3:--
ALTER TABLE FILM 
ADD
CONSTRAINT FILM_VALUE_VALID
CHECK(SUBSTR(Catalog_Num,LENGTH(CATALOG_NUM),1)=SUBSTR(FORMAT,1,1));

--Q4:--
ALTER TABLE RENTED_ITEM
ADD
CONSTRAINT LATE_FEE_REQ
CHECK((DUE_DATE>=RETURN_DATE AND LATE_FEE IS NULL) OR (DUE_DATE<RETURN_DATE AND LATE_FEE IS NOT NULL));

--DESCRIPTION: We need to ensure the Late_fee exists only happens when return date later than due date.--

ALTER TABLE MANAGER
ADD
CONSTRAINT TRAIN_DATE_VALID
CHECK (LAST_TRAINING >= BEGIN_DATE);

--DESCRIPTION: We need to ensure member's last traing date happens later than his/her first training.--

--Part II--

--Q1:--
SELECT TITLE, YEAR,COUNT(DISTINCT FILM_ID) AS "Number of Copies",COUNT(RENTAL_NUM) AS "Rented Times"
FROM FILM JOIN INVENTORY USING (CATALOG_NUM)
	      LEFT OUTER JOIN RENTED_ITEM USING (FILM_ID)
WHERE GENRE LIKE '%Sci-Fi%'
GROUP BY TITLE,YEAR
ORDER BY "Rented Times" DESC;

--Q2:--
SELECT EMP_ID||' '||FIRST_NAME||' '||LAST_NAME AS "SALES_REP_INFO",
COUNT(DISTINCT RENTAL_NUM) AS "Number of Rental",
COUNT(FILM_ID) AS "Number of Films"
FROM EMPLOYEE JOIN SALES_REP USING (EMP_ID)
			  LEFT OUTER JOIN RENTAL USING (EMP_ID)
			  LEFT OUTER JOIN RENTED_ITEM USING (RENTAL_NUM)
GROUP BY EMP_ID,FIRST_NAME,LAST_NAME
ORDER BY "Number of Films" DESC;

--Q3:--
COLUMN "MEMBER_INFO" FORMAT A20;
COLUMN RENTAL_NUM FORMAT A10;
COLUMN CATALOG_NUM FORMAT A11;
COLUMN TITLE FORMAT A50;
COLUMN "INDICATOR" FORMAT A10;
COLUMN "RENT_DATE" FORMAT 999999999;

SELECT MEMBER_ID||' '|| FIRST_NAME || ' ' || LAST_NAME AS "MEMBER_INFO",
RENTAL_NUM,RENT_DATE,CATALOG_NUM,TITLE,
(CASE WHEN RETURN_DATE IS NULL AND LATE_FEE IS NOT NULL 
			THEN 'OVERDUE'
	  WHEN RETURN_DATE IS NOT NULL AND LATE_FEE IS NOT NULL
			THEN 'LATE'
	  WHEN RETURN_DATE IS NULL AND LATE_FEE IS NULL 
			THEN 'NOT RETURN'
	  ELSE 'ON TIME'
	  END) AS "INDICATOR",
(CASE WHEN RETURN_DATE IS NULL THEN SYSDATE-RENT_DATE
	  WHEN RETURN_DATE IS NOT NULL THEN RETURN_DATE-RENT_DATE
	  END) AS "RENT_DATE"
FROM FILM JOIN INVENTORY USING (CATALOG_NUM)
		  JOIN RENTED_ITEM USING (FILM_ID)
		  JOIN RENTAL USING (RENTAL_NUM)
		  JOIN MEMBER USING (MEMBER_ID)	  
		  JOIN STORE ON STORE.STORE_NUM = MEMBER.STORE_NUM
WHERE RENT_DATE>=(SYSDATE-30) AND INVENTORY.STORE_NUM = 10;

--Q4:----
COLUMN "DAYS OUT" FORMAT A10;

SELECT CATALOG_NUM,MEMBER_ID||' '|| FIRST_NAME || ' ' || LAST_NAME AS "MEMBER_INFO",
RENT_DATE,FILM_ID,NUMBER_DISCS,DUE_DATE,RETURN_DATE,
(CASE WHEN RETURN_DATE IS NULL THEN 'NA'
	  WHEN RETURN_DATE IS NOT NULL THEN TO_CHAR(RETURN_DATE-RENT_DATE)
	  END) AS "DAYS OUT",RENTAL_COST
FROM FILM JOIN INVENTORY USING (CATALOG_NUM)
		  JOIN RENTED_ITEM USING (FILM_ID)
		  JOIN RENTAL USING (RENTAL_NUM)
		  JOIN MEMBER USING (MEMBER_ID)
		  JOIN 
(SELECT RENTAL_NUM,SUM(PRICE+NVL(LATE_FEE,0)) RENTAL_COST
FROM FILM JOIN INVENTORY USING (CATALOG_NUM)
		  JOIN RENTED_ITEM USING (FILM_ID)
		  JOIN RENTAL USING (RENTAL_NUM)
		  JOIN MEMBER USING (MEMBER_ID)
GROUP BY RENTAL_NUM
) USING (RENTAL_NUM)
WHERE RENT_DATE BETWEEN '15-MAR-2019' AND LAST_DAY(TO_DATE('MAR-2019','MON-YYYY'));

--Q5:--
SELECT STORE_NUM,COUNT(DISTINCT FILM_ID) AS "Number of Rented",
COUNT(DISTINCT EMPLOYEE.EMP_ID) AS "Number of Employee",
COUNT(DISTINCT FILM_ID)/COUNT(DISTINCT SALES_REP.EMP_ID) AS "Avg Film Rented PR"
FROM RENTED_ITEM LEFT OUTER JOIN INVENTORY USING (FILM_ID)
				 LEFT OUTER JOIN RENTAL USING(RENTAL_NUM)
				 LEFT OUTER JOIN STORE USING (STORE_NUM)
			     LEFT OUTER JOIN EMPLOYEE USING (STORE_NUM)
			     LEFT OUTER JOIN SALES_REP ON EMPLOYEE.EMP_ID = SALES_REP.EMP_ID
WHERE EXTRACT(YEAR FROM RENT_DATE)=EXTRACT(YEAR FROM SYSDATE) 
GROUP BY STORE_NUM
UNION ALL
SELECT 'Grand Total',COUNT(DISTINCT FILM_ID),COUNT(DISTINCT EMPLOYEE.EMP_ID),COUNT(DISTINCT FILM_ID)/COUNT(DISTINCT SALES_REP.EMP_ID)
FROM RENTED_ITEM LEFT OUTER JOIN INVENTORY USING (FILM_ID)
				 LEFT OUTER JOIN RENTAL USING(RENTAL_NUM)
				 LEFT OUTER JOIN STORE USING (STORE_NUM)
			     LEFT OUTER JOIN EMPLOYEE USING (STORE_NUM)
			     LEFT OUTER JOIN SALES_REP ON EMPLOYEE.EMP_ID = SALES_REP.EMP_ID
WHERE EXTRACT(YEAR FROM RENT_DATE)=EXTRACT(YEAR FROM SYSDATE);
			   
--Q6:--
SELECT STORE_NUM||' '||STORE_NAME AS "STORE_INFO",COUNT(DISTINCT FILM_ID) AS "RENTED_NUM",SUBSTR((COUNT(DISTINCT FILM_ID)/STORE_INVENTORY)*100,1,4)||'%' AS "PERCENTAGE_INVENTORY"
FROM INVENTORY LEFT OUTER JOIN RENTED_ITEM USING (FILM_ID)  
			   LEFT OUTER JOIN RENTAL USING (RENTAL_NUM)
			   LEFT OUTER JOIN STORE USING (STORE_NUM)
			   JOIN
(SELECT STORE_NUM,COUNT(DISTINCT FILM_ID) STORE_INVENTORY
FROM INVENTORY LEFT OUTER JOIN RENTED_ITEM USING (FILM_ID)  
			   LEFT OUTER JOIN RENTAL USING (RENTAL_NUM)
			   LEFT OUTER JOIN STORE USING (STORE_NUM)
			   GROUP BY STORE_NUM)
USING (STORE_NUM)
WHERE RETURN_DATE IS NULL AND RENT_DATE IS NOT NULL	
GROUP BY STORE_NUM,STORE_NAME,STORE_INVENTORY;



--Q7:--
SELECT GENRE,
COUNT(DISTINCT CATALOG_NUM) AS "Number Of Films",
COUNT(RENTAL_NUM) AS "Rented Times"
FROM FILM LEFT OUTER JOIN INVENTORY USING (CATALOG_NUM)
	      LEFT OUTER JOIN RENTED_ITEM USING (FILM_ID)
GROUP BY GENRE
UNION ALL
SELECT 'Grand Total',
COUNT(DISTINCT CATALOG_NUM) AS "Number Of Films",
COUNT(RENTAL_NUM) AS "Rented Times"
FROM FILM LEFT OUTER JOIN INVENTORY USING (CATALOG_NUM)
	      LEFT OUTER JOIN RENTED_ITEM USING (FILM_ID);